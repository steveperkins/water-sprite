// Generated by Phaser Editor v1.2.1

/**
 * Moomasher.
 * @param {Phaser.Game} aGame The game.
 * @param {Phaser.Group} aParent The parent group. If not given the game world will be used instead.
 */
function Moomasher(aGame, aParent) {
	Phaser.Group.call(this, aGame, aParent);

	/* --- pre-init-begin --- */
	this.game.stage.backgroundColor = "#FFF";

	this.cowMoveSpeed = 5;

	/* --- pre-init-end --- */

	var cow = this.game.add.sprite(1160, 515, 'spritesheet-cow', 'cow-standing', this);
	this.game.physics.arcade.enable(cow);

	var moomasher = this.game.add.sprite(311, 472, 'moomasher', null, this);

	var collisionGroup = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	var conveyor = this.game.add.sprite(593, 637, 'spritesheet-conveyor', 'conveyor-1', collisionGroup);

	 // public fields

	this.fCow = cow;
	this.fMoomasher = moomasher;
	this.fCollisionGroup = collisionGroup;
	this.fConveyor = conveyor;

	/* --- post-init-begin --- */
//	this.conveyorSprite = this.children.filter(filterByKey, 'spritesheet-conveyor')[0];
//	this.cowSprite = this.children.filter(filterByKey, 'spritesheet-cow')[0];
//	this.moomasherSprite = this.children.filter(filterByKey, 'moomasher')[0];
	
	this.fConveyor.animations.add('forward');
	this.fConveyor.animations.play('forward', 15, true);
	
	var cowAnimation = this.fCow.animations.add('forward');
    //animation.onStart.add(hamburgerHillInstance.animationCowStart, hamburgerHillInstance);
	cowAnimation.onLoop.add(this.animationCowLoop, this);
    //animation.onComplete.add(hamburgerHillInstance.animationCowStop, hamburgerHillInstance);
	cowAnimation.play(30, true);

	/* --- post-init-end --- */
}

/** @type Phaser.Group */
var Moomasher_proto = Object.create(Phaser.Group.prototype);
Moomasher.prototype = Moomasher_proto;
Moomasher.prototype.constructor = Phaser.Group;

/* --- end generated code --- */

// you can insert code here
Moomasher.prototype.animationCowLoop = function(sprite, animation) {
    // 'this' is set to the Moomasher object via the onLoop.add function
    sprite.x -= this.cowMoveSpeed;
    if(sprite.right <= this.fConveyor.left) {
        sprite.x = this.fConveyor.right;
    }
};
	
function filterByKey(value) {
	return value.key == this;
}